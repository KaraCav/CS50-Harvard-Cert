#include <cs50.h>
#include <stdio.h>
#include <string.h>

// Max voters and candidates
#define MAX_VOTERS 100
#define MAX_CANDIDATES 9

// preferences[i][j] is jth preference for voter i
int preferences[MAX_VOTERS][MAX_CANDIDATES];

// Candidates have name, vote count, eliminated status
typedef struct
{
    string name;
    int votes;
    bool eliminated;
}
candidate;

// Array of candidates
candidate candidates[MAX_CANDIDATES];

// Numbers of voters and candidates
int voter_count;
int candidate_count;

// Function prototypes
bool vote(int voter, int rank, string name);
void tabulate(void);
bool print_winner(void);
int find_min(void);
bool is_tie(int min);
void eliminate(int min);

int main(int argc, string argv[])
{
    // Check for invalid usage
    if (argc < 2)
    {
        printf("Usage: runoff [candidate ...]\n");
        return 1;
    }

    // Populate array of candidates
    candidate_count = argc - 1;
    if (candidate_count > MAX_CANDIDATES)
    {
        printf("Maximum number of candidates is %i\n", MAX_CANDIDATES);
        return 2;
    }
    for (int i = 0; i < candidate_count; i++)
    {
        candidates[i].name = argv[i + 1];
        candidates[i].votes = 0;
        candidates[i].eliminated = false;
    }

    voter_count = get_int("Number of voters: ");
    if (voter_count > MAX_VOTERS)
    {
        printf("Maximum number of voters is %i\n", MAX_VOTERS);
        return 3;
    }

    // Keep querying for votes
    for (int i = 0; i < voter_count; i++)
    {

        // Query for each rank
        for (int j = 0; j < candidate_count; j++)
        {
            string name = get_string("Rank %i: ", j + 1);

            // Record vote, unless it's invalid
            if (!vote(i, j, name))
            {
                printf("Invalid vote.\n");
                return 4;
            }
        }

        printf("\n");
    }

    // Keep holding runoffs until winner exists
    while (true)
    {
        // Calculate votes given remaining candidates
        tabulate();

        // Check if election has been won
        bool won = print_winner();
        if (won)
        {
            break;
        }

        // Eliminate last-place candidates
        int min = find_min();
        bool tie = is_tie(min);

        // If tie, everyone wins
        if (tie)
        {
            for (int i = 0; i < candidate_count; i++)
            {
                if (!candidates[i].eliminated)
                {
                    printf("candidate in tie %s\n", candidates[i].name);
                }
            }
            break;
        }

        // Eliminate anyone with minimum number of votes
        eliminate(min);

        // Reset vote counts back to zero
        for (int i = 0; i < candidate_count; i++)
        {
            candidates[i].votes = 0;
        }
    }
    return 0;
}

////////////////////
// MY CODE STARTS //
////////////////////
bool vote(int voter, int rank, string name)
{
    for (int j = 0; j < candidate_count; j++)
    {
        if (strcmp(name, candidates[j].name) == 0)
        {
            // add to the preferences array if valid
            preferences[voter][rank] = j;
            return true;
        }
    }
    return false;
}

// Tabulate the votes
void tabulate(void)
{
    for (int i = 0; i < voter_count; i++)
    {
        // update the # of votes each candidate has
        // For a voter i, their top choice candidate is at preferences[i][0]
        for (int j = 0; j < candidate_count; j++)
        {
            // Only add vote if not eliminated
            int preference = preferences[i][j];
            if (candidates[preference].eliminated == false)
            {
                candidates[preference].votes++;
                break;
            }
        }
    }
}

// If winner, print name
bool print_winner(void)
{
    // If candidate has >= 50% of votes, they win
    for (int c = 0; c < candidate_count; c++)
    {
        if (candidates[c].votes > (voter_count / 2))
        {
            printf("Candidate name: %s\n", candidates[c].name);
            return true;
        }
    }
    return false;
}

// Return the minimum number of votes any remaining candidate has
int find_min(void)
{
    int lowest_number = voter_count;
    for (int i = 0; i < candidate_count; i++)
    {
        if (candidates[i].votes < lowest_number && candidates[i].eliminated == false)
        {
            lowest_number = candidates[i].votes;
        }
    }
    return lowest_number;
}


// Return true if ALL candidates have the min vote
bool is_tie(int min)
{
    int tieCount = 0;
    int totalRunning = 0;

    for (int i = 0; i < candidate_count; i++)
    {
        if (candidates[i].eliminated == false && candidates[i].votes == min)
        {
            tieCount++;
            totalRunning++;
        }
        else if (candidates[i].eliminated == false)
        {
            totalRunning++;
        }
    }
    // Checks if it's a tie
    if (tieCount == totalRunning)
    {
        return true;
    }
    return false;
}


// Remove the candidate/candidates with min vote
void eliminate(int min)
{
    for (int i = 0; i < candidate_count; i++)
    {
        printf("votes, names, min %i, %s, %i \n", candidates[i].votes, candidates[i].name, min);
        if (candidates[i].votes == min && candidates[i].eliminated == false)
        {
            candidates[i].eliminated = true;
            printf(" %s was eliminated \n", candidates[i].name);
        }
    }
    return;
}
